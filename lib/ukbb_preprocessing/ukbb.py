x_keys = {}

x_keys['rfmri_pcorr_25'] = ['dump_rfMRI_partialcorr_matrix_dim25_%i' % i for i in range(210)]
x_keys['rfmri_pcorr_100'] = ['dump_rfMRI_partialcorr_matrix_dim100_%i' % i for i in range(1485)]
x_keys['rfmri_corr_25'] = ['dump_rfMRI_corr_matrix_dim25_%i' % i for i in range(210)]
x_keys['rfmri_corr_100'] = ['dump_rfMRI_corr_matrix_dim100_%i' % i for i in range(1485)]

tmp = [25739, 25741, 25744, 25743]
x_keys['rfmri_tech'] = ['%i-2.0' % i for i in tmp]

tmp = [25010, 25009, 25008, 25007, 25006, 25005, 25002, 25001, 25004, 25003, 25025, 25888, 25889, 25822, 25823, 25892,
       25880, 25881, 25864, 25865, 25838, 25839, 25840, 25841, 25900, 25902, 25903, 25905, 25844, 25845, 25830, 25831,
       25862, 25863, 25846, 25847, 25782, 25783, 25870, 25871, 25886, 25887, 25893, 25894, 25915, 25917, 25792, 25793,
       25790, 25791, 25808, 25809, 25810, 25811, 25812, 25813, 25784, 25785, 25828, 25829, 25832, 25833, 25826, 25827,
       25824, 25825, 25852, 25853, 25788, 25789, 25802, 25803, 25804, 25805, 25806, 25807, 25860, 25861, 25876, 25877,
       25884, 25885, 25836, 25837, 25848, 25849, 25850, 25851, 25866, 25867, 25868, 25869, 25872, 25873, 25814, 25815,
       25794, 25795, 25842, 25843, 25882, 25883, 25834, 25835, 25786, 25787, 25816, 25817, 25798, 25799, 25800, 25801,
       25874, 25875, 25818, 25819, 25820, 25821, 25854, 25855, 25856, 25857, 25858, 25859, 25796, 25797, 25878, 25879,
       25895, 25896, 25897, 25899, 25909, 25911, 25912, 25914, 25906, 25908, 25890, 25891, 25901, 25904, 25916, 25898,
       25910, 25913, 25907, 25919, 25918, 25920, 25023, 25024, 25021, 25022, 25013, 25014, 25019, 25020, 25017, 25018,
       25015, 25016, 25011, 25012]
x_keys['t1_mri'] = ['%i-2.0' % i for i in tmp]

# 25000, 2575{6,7,8,9} missing in csv
tmp = [25733, 25731, 25732, 25735, 25734]
x_keys['t1_mri_tech'] = ['%i-2.0' % i for i in tmp]

tmp = [25488, 25489, 25490, 25491, 25492, 25493, 25496, 25497, 25498, 25499, 25500, 25501, 25502, 25503, 25505, 25506,
       25504, 25494, 25495, 25507, 25508, 25509, 25510, 25511, 25512, 25513, 25514, 25650, 25651, 25652, 25653, 25654,
       25655, 25658, 25659, 25660, 25661, 25662, 25663, 25664, 25665, 25667, 25668, 25666, 25656, 25657, 25669, 25670,
       25671, 25672, 25673, 25674, 25675, 25676, 25704, 25705, 25706, 25707, 25708, 25709, 25712, 25713, 25714, 25715,
       25716, 25717, 25718, 25719, 25721, 25722, 25720, 25710, 25711, 25723, 25724, 25725, 25726, 25727, 25728, 25729,
       25730, 25569, 25570, 25571, 25572, 25573, 25574, 25577, 25578, 25579, 25580, 25581, 25582, 25583, 25584, 25586,
       25587, 25585, 25575, 25576, 25588, 25589, 25590, 25591, 25592, 25593, 25594, 25595, 25596, 25597, 25598, 25599,
       25600, 25601, 25604, 25605, 25606, 25607, 25608, 25609, 25610, 25611, 25613, 25614, 25612, 25602, 25603, 25615,
       25616, 25617, 25618, 25619, 25620, 25621, 25622, 25623, 25624, 25625, 25626, 25627, 25628, 25631, 25632, 25633,
       25634, 25635, 25636, 25637, 25638, 25640, 25641, 25639, 25629, 25630, 25642, 25643, 25644, 25645, 25646, 25647,
       25648, 25649, 25515, 25516, 25517, 25518, 25519, 25520, 25523, 25524, 25525, 25526, 25527, 25528, 25529, 25530,
       25532, 25533, 25531, 25521, 25522, 25534, 25535, 25536, 25537, 25538, 25539, 25540, 25541, 25542, 25543, 25544,
       25545, 25546, 25547, 25550, 25551, 25552, 25553, 25554, 25555, 25556, 25557, 25559, 25560, 25558, 25548, 25549,
       25561, 25562, 25563, 25564, 25565, 25566, 25567, 25568, 25677, 25678, 25679, 25680, 25681, 25682, 25685, 25686,
       25687, 25688, 25689, 25690, 25691, 25692, 25694, 25695, 25693, 25683, 25684, 25696, 25697, 25698, 25699, 25700,
       25701, 25702, 25703, ]
x_keys['wdmri'] = ['%i-2.0' % i for i in tmp]

tmp = [25079, 25078, 25073, 25072, 25059, 25071, 25070, 25091, 25090, 25093, 25092, 25063, 25062, 25089, 25088, 25095,
       25094, 25061, 25058, 25067, 25066, 25065, 25064, 25056, 25057, 25083, 25082, 25075, 25074, 25085, 25084, 25077,
       25076, 25087, 25086, 25060, 25069, 25068, 25081, 25080, 25099, 25098, 25097, 25096, 25103, 25102, 25101, 25100,
       25367, 25366, 25361, 25360, 25347, 25359, 25358, 25379, 25378, 25381, 25380, 25351, 25350, 25377, 25376, 25383,
       25382, 25349, 25346, 25355, 25354, 25353, 25352, 25344, 25345, 25371, 25370, 25363, 25362, 25373, 25372, 25365,
       25364, 25375, 25374, 25348, 25357, 25356, 25369, 25368, 25387, 25386, 25385, 25384, 25391, 25390, 25389, 25388,
       25463, 25462, 25457, 25456, 25443, 25455, 25454, 25475, 25474, 25477, 25476, 25447, 25446, 25473, 25472, 25479,
       25478, 25445, 25442, 25451, 25450, 25449, 25448, 25440, 25441, 25467, 25466, 25459, 25458, 25469, 25468, 25461,
       25460, 25471, 25470, 25444, 25453, 25452, 25465, 25464, 25483, 25482, 25481, 25480, 25487, 25486, 25485, 25484,
       25223, 25222, 25217, 25216, 25203, 25215, 25214, 25235, 25234, 25237, 25236, 25207, 25206, 25233, 25232, 25239,
       25238, 25205, 25202, 25211, 25210, 25209, 25208, 25200, 25201, 25227, 25226, 25219, 25218, 25229, 25228, 25221,
       25220, 25231, 25230, 25204, 25213, 25212, 25225, 25224, 25243, 25242, 25241, 25240, 25247, 25246, 25245, 25244,
       25271, 25270, 25265, 25264, 25251, 25263, 25262, 25283, 25282, 25285, 25284, 25255, 25254, 25281, 25280, 25287,
       25286, 25253, 25250, 25259, 25258, 25257, 25256, 25248, 25249, 25275, 25274, 25267, 25266, 25277, 25276, 25269,
       25268, 25279, 25278, 25252, 25261, 25260, 25273, 25272, 25291, 25290, 25289, 25288, 25295, 25294, 25293, 25292,
       25319, 25318, 25313, 25312, 25299, 25311, 25310, 25331, 25330, 25333, 25332, 25303, 25302, 25329, 25328, 25335,
       25334, 25301, 25298, 25307, 25306, 25305, 25304, 25296, 25297, 25323, 25322, 25315, 25314, 25325, 25324, 25317,
       25316, 25327, 25326, 25300, 25309, 25308, 25321, 25320, 25339, 25338, 25337, 25336, 25343, 25342, 25341, 25340,
       25127, 25126, 25121, 25120, 25107, 25119, 25118, 25139, 25138, 25141, 25140, 25111, 25110, 25137, 25136, 25143,
       25142, 25109, 25106, 25115, 25114, 25113, 25112, 25104, 25105, 25131, 25130, 25123, 25122, 25133, 25132, 25125,
       25124, 25135, 25134, 25108, 25117, 25116, 25129, 25128, 25147, 25146, 25145, 25144, 25151, 25150, 25149, 25148,
       25175, 25174, 25169, 25168, 25155, 25167, 25166, 25187, 25186, 25189, 25188, 25159, 25158, 25185, 25184, 25191,
       25190, 25157, 25154, 25163, 25162, 25161, 25160, 25152, 25153, 25179, 25178, 25171, 25170, 25181, 25180, 25173,
       25172, 25183, 25182, 25156, 25165, 25164, 25177, 25176, 25195, 25194, 25193, 25192, 25199, 25198, 25197, 25196,
       25415, 25414, 25409, 25408, 25395, 25407, 25406, 25427, 25426, 25429, 25428, 25399, 25398, 25425, 25424, 25431,
       25430, 25397, 25394, 25403, 25402, 25401, 25400, 25392, 25393, 25419, 25418, 25411, 25410, 25421, 25420, 25413,
       25412, 25423, 25422, 25396, 25405, 25404, 25417, 25416, 25435, 25434, 25433, 25432, 25439, 25438, 25437, 25436, ]
x_keys['sdmri'] = ['%i-2.0' % i for i in tmp]

tmp = [25767, 25763, 25761, 25765, 25768, 25764, 25762, 25766, 25052, 25044, 25040, 25048, 25054, 25046, 25042, 25050, ]
x_keys['tfmri'] = ['%i-2.0' % i for i in tmp]

tmp = [25740, 25745, 25742]
x_keys['tfmri_tech'] = ['%i-2.0' % i for i in tmp]

y_keys = {}

y_keys['sex'] = '31-0.0'
y_keys['fluid_intelligence'] = '20016-2.0'
y_keys['past_smoking'] = '1249-0.0'
y_keys['number_in_household'] = '709-0.0'
y_keys['household_income'] = '738-0.0'
y_keys['age'] = '21003-0.0'

################################################################################

import pandas


def get_ukbb_data(xkeys, ykey):
       # read data and filter for keys

       # df = pandas.read_pickle('../data/ukbb_full_merge.p')
       df = pandas.read_pickle('hpcwork/brainml/UKBB/ukbb_full_merge_fixed.p')

       df = df[xkeys + [ykey, ]]
       # df = df[xkeys + ykey]
       df = df.dropna()

       # exclude dont know, etc
       df = df[df[ykey] >= 0]

       # qcut
       # if qcut is not False:
       #    df[ykey] = pandas.qcut(df[ykey], qcut, False, False)

       # exclude tiny classes
       # df = df.groupby(ykey).filter(lambda x: len(x) > 250)
       x = df[xkeys].values  # .astype('f')
       y = df[ykey].values  # .astype('i')
       # x = StandardScaler().fit_transform(x)

       # clip outlier
       # if clip:
       #    x=x.clip(-clip,clip)

       return x, y
